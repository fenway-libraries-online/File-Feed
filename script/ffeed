#!/usr/bin/perl

use strict;
use warnings;

use File::Feed;
use File::Kvpar;
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

usage() if !@ARGV;

my $cmd = shift;
my $code = __PACKAGE__->can("cmd_$cmd") or usage();
$code->();

sub cmd_fill {
    my %opt;
    GetOptions(\%opt, qw(m v)) && @ARGV or usage();
    my $feed = File::Feed->new(shift @ARGV);
    my @new = $feed->fill(@ARGV);
    if ($opt{'m'}) {
        File::Kvpar->new(\*STDOUT)->write(@new);
    }
    elsif ($opt{'v'}) {
        printf "%s <= %s\n", $_->to, $_->from for @new;
    }
    else {
        print $_->to, "\n" for @new;
    }
}

sub cmd_new {
    usage() if @ARGV < 1;
    my $feed = File::Feed->new(shift @ARGV);
    my %filter;
    $filter{'channels'} = [@ARGV] if @ARGV;
    my @new = $feed->new_files(%filter);
    print $_->to, "\n" for @new;
}

sub cmd_drain {
    my %opt;
    GetOptions(\%opt, 'p=i') && @ARGV > 1 or usage();
    my $feed = File::Feed->new(shift @ARGV);
    my $dir = shift @ARGV;
    my %filter;
    $filter{'channels'} = [@ARGV] if @ARGV;
    $filter{'strip_leading_components'} = $opt{'p'} if $opt{'p'};
    $feed->drain('to' => $dir, %filter);
}

sub usage {
    print STDERR <<'EOS';
usage: ffeed COMMAND [ARG...]
commands:
    fill  FEED [CHANNEL...]        Fill a feed with new files
    new   FEED [CHANNEL...]        List new files in a feed
    drain FEED DIR [CHANNEL...]    Move new files to DIR
EOS
    exit 1;
}
